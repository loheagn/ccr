// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfEvent struct {
	Pid     uint32
	_       [4]byte
	Inode   uint64
	Pos     int64
	Ret     uint64
	IsWrite bool
	Comm    [80]uint8
	_       [7]byte
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	KernelRead     *ebpf.ProgramSpec `ebpf:"kernel_read"`
	KernelReadRet  *ebpf.ProgramSpec `ebpf:"kernel_read_ret"`
	KernelWrite    *ebpf.ProgramSpec `ebpf:"kernel_write"`
	VfsIterRead    *ebpf.ProgramSpec `ebpf:"vfs_iter_read"`
	VfsIterReadRet *ebpf.ProgramSpec `ebpf:"vfs_iter_read_ret"`
	VfsIterWrite   *ebpf.ProgramSpec `ebpf:"vfs_iter_write"`
	VfsRead        *ebpf.ProgramSpec `ebpf:"vfs_read"`
	VfsReadRet     *ebpf.ProgramSpec `ebpf:"vfs_read_ret"`
	VfsReadv       *ebpf.ProgramSpec `ebpf:"vfs_readv"`
	VfsReadvRet    *ebpf.ProgramSpec `ebpf:"vfs_readv_ret"`
	VfsWrite       *ebpf.ProgramSpec `ebpf:"vfs_write"`
	VfsWritev      *ebpf.ProgramSpec `ebpf:"vfs_writev"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Entries *ebpf.MapSpec `ebpf:"entries"`
	Events  *ebpf.MapSpec `ebpf:"events"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Entries *ebpf.Map `ebpf:"entries"`
	Events  *ebpf.Map `ebpf:"events"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Entries,
		m.Events,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	KernelRead     *ebpf.Program `ebpf:"kernel_read"`
	KernelReadRet  *ebpf.Program `ebpf:"kernel_read_ret"`
	KernelWrite    *ebpf.Program `ebpf:"kernel_write"`
	VfsIterRead    *ebpf.Program `ebpf:"vfs_iter_read"`
	VfsIterReadRet *ebpf.Program `ebpf:"vfs_iter_read_ret"`
	VfsIterWrite   *ebpf.Program `ebpf:"vfs_iter_write"`
	VfsRead        *ebpf.Program `ebpf:"vfs_read"`
	VfsReadRet     *ebpf.Program `ebpf:"vfs_read_ret"`
	VfsReadv       *ebpf.Program `ebpf:"vfs_readv"`
	VfsReadvRet    *ebpf.Program `ebpf:"vfs_readv_ret"`
	VfsWrite       *ebpf.Program `ebpf:"vfs_write"`
	VfsWritev      *ebpf.Program `ebpf:"vfs_writev"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.KernelRead,
		p.KernelReadRet,
		p.KernelWrite,
		p.VfsIterRead,
		p.VfsIterReadRet,
		p.VfsIterWrite,
		p.VfsRead,
		p.VfsReadRet,
		p.VfsReadv,
		p.VfsReadvRet,
		p.VfsWrite,
		p.VfsWritev,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
