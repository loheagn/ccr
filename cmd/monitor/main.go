package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target arm64 -type event bpf ./ebpf/kprobe.c

func main() {
	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	kprobeFnMap := map[string]struct {
		kprobe    *ebpf.Program
		kretprobe *ebpf.Program
	}{
		"vfs_read": {
			kprobe:    objs.VfsRead,
			kretprobe: objs.VfsRetRead,
		},
		"kernel_read": {
			kprobe:    objs.KernelRead,
			kretprobe: objs.KernelRetRead,
		},
	}

	for fn, prog := range kprobeFnMap {
		// Open a Kprobe at the entry point of the kernel function and attach the
		// pre-compiled program. Each time the kernel function enters, the program
		// will emit an event containing pid and command of the execved task.
		kp, err := link.Kprobe(fn, prog.kprobe, nil)
		if err != nil {
			log.Fatalf("opening kprobe: %s", err)
		}
		defer kp.Close()

		kretp, err := link.Kretprobe(fn, prog.kretprobe, nil)
		if err != nil {
			log.Fatalf("opening kretprobe: %s", err)
		}
		defer kretp.Close()
	}

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		comm := unix.ByteSliceToString(event.Comm[:])
		if comm == "sshd" || comm == "containerd" || comm == "node" || comm == "tokio-runtime-w" {
			continue
		}

		log.Printf("pid: %d\t\tcomm: %s\tinode: %d\tpos: %d\tret: %d\n", event.Pid, comm, event.Inode, event.Pos, event.Ret)
	}
}
